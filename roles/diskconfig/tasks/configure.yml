#
# (c) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017-2018 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Play to set up lvm FS and mounts
---

# TODO: remove this debug comment once we are happy this mechanism
# causes no undesirable side effects.
- name: osconfig | diskconfig | proposed lvm.conf filter entries
  debug: msg="filter = {{ diskconfig_lvm_filter_entries }}"

# See if lvmetad is already enabled
- name: osconfig | diskconfig | Is lvmetad enabled in lvm.conf already?
  become: yes
  shell: fgrep "use_lvmetad =" /etc/lvm/lvm.conf | xargs | awk '{ print $3 }'
  register: use_lvmetad_output

# We have to stop lvmetad service prior to updating lvm.conf.
# we are enabling lvmetad by setting use_lvmetad = 1 due to bug
# 1084559.  This requires making sure lvmetad is stopped prior to
# updating lvm.conf, and then starting it again after
- name: osconfig | diskconfig | Make sure lvm2-lvmetad service is stopped
  become: yes
  service: name=lvm2-lvmetad state=stopped
  when: use_lvmetad_output.stdout == "0"

# Update the filter settings in the lvm.conf using the list of filter
# entries found in the diskconfig_lvm_filter_entries, if not empty.
# This will replace any active filter entry line, since there can be
# only one, and will be inserted before the standard comment line that
# contains the string "By default we accept every block device".
- name: osconfig | diskconfig | Install lvm.conf
  become: yes
  template:
    src: lvm.conf.j2
    dest: /etc/lvm/lvm.conf
    mode: 0644
    owner: root
    group: root

- name: osconfig | diskconfig | determine root filesystem mount
  set_fact:
    root_mount: >
      {{ ansible_mounts | selectattr('mount', 'equalto', '/') | first }}

- name: osconfig | diskconfig | determine VG & LV for root device
  become: yes
  command: >
    lvs
      -o vg_name,lv_name
      --noheadings
      --nameprefixes
      --unquoted
      {{ root_mount.device }}
  register: _lvs_root_device_result

- name: osconfig | diskconfig | extract VG & LV for root filesystem
  set_fact:
    root_vg: >
      {{ _lvs_root_device_result.stdout.strip().split(' ')[0].split('=')[1] }}
    root_lv: >
      {{ _lvs_root_device_result.stdout.strip().split(' ')[1].split('=')[1] }}

- name: osconfig | diskconfig | get ardana root
  set_fact:
    # item.0 doesn't include the named subelement, so retrieve the
    # matching VG entry again explicitly.
    mdm_base_vg: "{{ host.my_disk_models.volume_groups |
                     selectattr('name', 'equalto', item.0.name) |
                     list | first }}"
    base_disk: "{{ item.1 | regex_replace('_root','') }}"
    full_match: "{{ item.1 }}"
  when: item.0.name == "{{ root_vg }}" and item.1 | search("_root")
  with_subelements:
    - "{{ host.my_disk_models.volume_groups }}"
    - physical_volumes

- name: osconfig | diskconfig | get base volume in vg
  command: >
    vgs
      -o pv_name
      --noheadings
      --nameprefixes
      --unquoted
      {{ root_vg }}
  register: _vgs_root_vg_result
  when: base_disk is defined

- name: osconfig | diskconfig | set base pv
  set_fact:
    base_pv: >
      {{ _vgs_root_vg_result.stdout.strip().split(' ')[0].split('=')[1] }}
  when: base_disk is defined

- name: osconfig | diskconfig | assign vg_pvs
  set_fact:
    vg_pvs: >
      {{ mdm_base_vg.physical_volumes | join(',') |
         replace(full_match, base_pv) }}
  when: base_disk is defined

- name: osconfig | diskconfig | setup volume groups templated root dev
  lvg: vg={{ mdm_base_vg.name }} pvs={{ vg_pvs }}
  when: base_disk is defined

- name: osconfig | diskconfig | setup volume groups
  lvg: vg={{ item.name }} pvs={{ item.physical_volumes | join(",") }}
  when: item.name != "{{ root_vg }}" or base_disk is not defined
  with_items: "{{ host.my_disk_models.volume_groups }}"

# remap lv named "root" in root VG to be dynamically determined root_lv
# value in the following actions using ternary() operator
- name: osconfig | diskconfig | create LVs
  lvol:
    vg: "{{ item.0.name }}"
    lv: >
      {{ ((item.0.name == root_vg) and (item.1.name == "root"))
         | ternary(root_lv, item.1.name) }}
    size: "{{ item.1.size }}VG"
  with_subelements:
    - "{{ host.my_disk_models.volume_groups }}"
    - logical_volumes

- name: osconfig | diskconfig | Extend root LV
  command: >
    lvextend
      -l {{ item.1.size }}VG
      /dev/{{ item.0.name }}/{{ (item.1.name == "root")
                                | ternary(root_lv, item.1.name) }}
  when:
    - item.0.name == root_vg
    - (item.1.name == root_lv) or (item.1.name == "root")
  with_subelements:
    - "{{ host.my_disk_models.volume_groups }}"
    - logical_volumes
  register: extend_output
  failed_when: ( extend_output.rc != 0 ) and ( "matches existing size" not in extend_output.stderr )

- name: osconfig | diskconfig | mkfs lv with options
  filesystem:
    fstype: "{{ item.1.fstype }}"
    opts: "{{ item.1.mkfs_opts }}"
    dev: >
      /dev/{{ item.0.name }}/{{ (item.1.name == "root")
                                | ternary(root_lv, item.1.name) }}
  when: item.1.mkfs_opts is defined and item.1.fstype is defined
  with_subelements:
    - "{{ host.my_disk_models.volume_groups }}"
    - logical_volumes

- name: osconfig | diskconfig | mkfs lv no options
  filesystem:
    fstype: "{{ item.1.fstype }}"
    dev: >
      /dev/{{ item.0.name }}/{{ (item.1.name == "root")
                                | ternary(root_lv, item.1.name) }}
  when: item.1.mkfs_opts is not defined and item.1.fstype is defined
  with_subelements:
    - "{{ host.my_disk_models.volume_groups }}"
    - logical_volumes

- name: osconfig | diskconfig | resize root fs if necessary
  command: >
    resize2fs /dev/{{ item.0.name }}/{{ (item.1.name == "root")
                                        | ternary(root_lv, item.1.name) }}
  when:
    - item.0.name == root_vg
    - item.1.fstype is defined
    - item.1.fstype == "ext4"
    - (item.1.name == root_lv) or (item.1.name == "root")
  with_subelements:
    - "{{ host.my_disk_models.volume_groups }}"
    - logical_volumes

- name: osconfig | diskconfig | Check if deployer and control plane co-existing
  set_fact:
    deployer_coexisting: true
  when: "'resources' in group_names"
  run_once: true
  delegate_to: localhost

- name: osconfig | diskconfig | Check if /var/log is in the disk input model
  set_fact:
    log_mount_in_disk_model: true
  when: deployer_coexisting is defined and item.1.mount is defined and item.1.mount.find("/var/log") != -1
  with_subelements:
    - "{{ host.my_disk_models.volume_groups }}"
    - logical_volumes
  run_once: true
  delegate_to: localhost

- name: osconfig | diskconfig | Check if /var/log is a mountpoint
  command: bash -c "cat /etc/fstab  | grep -e /var/log"
  register: log_is_mountpoint
  ignore_errors: True
  when: deployer_coexisting is defined and log_mount_in_disk_model is defined
  run_once: true
  delegate_to: localhost

- name: osconfig | diskconfig | Set log already mounted fact
  set_fact:
    log_already_mounted: true
  when: deployer_coexisting is defined and log_mount_in_disk_model is defined and log_is_mountpoint.rc == 1
  run_once: true
  delegate_to: localhost

- name: osconfig | diskconfig | Backup log dir before mounting log partition
  become: yes
  command: cp -dpr /var/log {{ ansible_env['HOME'] }}
  when: log_already_mounted is defined
  run_once: true
  delegate_to: localhost

- name: osconfig | diskconfig | Create the lv mount point if it does not exist
  file:
    path: "{{ item.1.mount }}"
    state: directory
  when: item.1.mount is defined
  with_subelements:
    - "{{ host.my_disk_models.volume_groups }}"
    - logical_volumes

- name: osconfig | diskconfig | mount lv fs
  mount: name={{ item.1.mount }} src=/dev/{{ item.0.name }}/{{ item.1.name }} fstype={{ item.1.fstype }} state=mounted
  when: item.1.mount is defined and item.1.fstype is defined
  with_subelements:
    - "{{ host.my_disk_models.volume_groups }}"
    - logical_volumes

- name: osconfig | diskconfig | Set the lv file system mode bits
  file:
    mode: "{{ item.1.mode }}"
    path: "{{ item.1.mount }}"
    state: directory
  when: item.1.mount is defined and
        item.1.mode is defined
  with_subelements:
    - "{{ host.my_disk_models.volume_groups }}"
    - logical_volumes

- name: osconfig | diskconfig | Restore SELinux security context of /var/log
  file:
    path: /var/log
    state: directory
    setype: var_log_t
  when: ansible_os_family == 'RedHat'

- name: osconfig | diskconfig | Restore log dir after mounting log partition
  become: yes
  command: cp -dpr {{ ansible_env['HOME'] }}/log /var
  when: log_already_mounted is defined
  run_once: true
  delegate_to: localhost

- name: osconfig | diskconfig | Remove log dir backup
  become: yes
  file: path={{ ansible_env['HOME'] }}/log state=absent
  when: log_already_mounted is defined
  run_once: true
  delegate_to: localhost

- name: osconfig | diskconfig | Restart Services using log dir prior to mounting
  service: name=apache2 state=restarted
  when: log_already_mounted is defined
  run_once: true
  delegate_to: localhost

- name: osconfig | diskconfig | mkfs physical device no options
  filesystem: fstype={{ item.1.fstype }} dev="{{ item.1.name }}"
  when: ( item.1.mkfs_opts is not defined ) and ( item.1.fstype is defined )
  with_subelements:
    - "{{ host.my_disk_models.device_groups | default([]) }}"
    - devices

- name: osconfig | diskconfig | mkfs physical device with options
  filesystem: fstype={{ item.1.fstype }} opts="{{ item.1.mkfs_opts }}" dev="{{ item.1.name }}"
  when: ( item.1.mkfs_opts is defined ) and ( item.1.fstype is defined )
  with_subelements:
    - "{{ host.my_disk_models.device_groups | default([]) }}"
    - devices

- name: osconfig | diskconfig | Create the physical device mount point if needed
  file:
    path: "{{ item.1.mount }}"
    state: directory
  when: item.1.mount is defined
  with_subelements:
    - "{{ host.my_disk_models.device_groups | default([]) }}"
    - devices

- name: osconfig | diskconfig | mount physical device fs
  mount: name={{ item.1.mount }} src="{{ item.1.name }}" fstype={{ item.1.fstype }} state=mounted
  when: item.1.mount is defined and item.1.fstype is defined
  with_subelements:
    - "{{ host.my_disk_models.device_groups | default([]) }}"
    - devices

- name: osconfig | diskconfig | Set the physical device file system mode bits
  file:
    mode: "{{ item.1.mode }}"
    path: "{{ item.1.mount }}"
    state: directory
  when: item.1.mount is defined and
        item.1.mode is defined
  with_subelements:
    - "{{ host.my_disk_models.device_groups | default([]) }}"
    - devices

- name: osconfig | diskconfig | check if log restart needed
  stat: path="{%- if ansible_os_family in ['RedHat', 'Suse'] -%}/var/log/messages{%- else -%}/var/log/syslog{%- endif -%}"
  register: syslog_status

- name: osconfig | diskconfig | restart syslog if needed
  service: name=rsyslog state=restarted
  when: syslog_status.stat.exists == False
