#
# (c) Copyright 2015-2017 Hewlett Packard Enterprise Development LP
# (c) Copyright 2017-2019 SUSE LLC
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
---
- include_vars: multipath_vars.yml

# Is this the first ever run
- name: multipath | install | Check if multipath ran
  stat: path=/etc/openstack/multipath-ran
  register: multipath_ran_result

- name: multipath | install | get pvs
  shell: pvs | grep mapper
  register: multipath_pv_devices
  failed_when: multipath_pv_devices.rc > 1

- name: multipath | install | get mount paths
  shell: mount | grep mpath
  register: multipath_mount_devices
  failed_when: multipath_mount_devices.rc > 1

- name: multipath | install | get mounts
  set_fact:
     multipath_used: True
  when: multipath_mount_devices.rc == 0 or multipath_pv_devices.rc == 0

- name: multipath | install | check fact
  check_wildcard: blacklist='{{ multipath_blacklist | to_json }}'
  when: multipath_blacklist is defined and multipath_used is defined and ansible_os_family == 'RedHat'

- name: multipath | install | Check if multipath ran
  stat: path=/etc/openstack/osconfig-ran
  register: osconfig_ran_result

- name: multipath | install | Set fact if first run
  set_fact:
      multipath_first_run: True
  when: (multipath_ran_result.stat.exists == False) and (osconfig_ran_result.stat.exists == False)

- name: multipath | install | Load multipath configuration variables
  include_vars: "multipath_vars.yml"

- name: multipath | install | Get wwids of all devices in disk model
  get_wwid: ardana_host_info='{{ host | to_json }}'
  register: disk_model_mappings

# For the very first time that multipath is configured need to set user friendly name
# This will then be changed once the bindings file is updated
# This could already be done during install phase
- name: multipath | install | Check if multipath.conf exists
  stat:
      path: /etc/multipath.conf
  register: multipath_conf_result

- name: multipath | install | initialize rewrite_multipath_conf to True
  set_fact:
      rewrite_multipath_conf: True

- name: multipath | install | set rewrite_multipath_conf to False
  set_fact:
      rewrite_multipath_conf: False
  when: manual_multipath_conf and multipath_conf_result.stat.exists

- name: multipath | install | Set user_friendly_names yes
  set_fact:
      multipath_user_friendly_names: "yes"
  when: rewrite_multipath_conf

- name: multipath | install | Set initial multipath configuration
  template:
    src: "multipath.conf.j2"
    dest: "/etc/multipath.conf"
  register: configuration_update
  when: rewrite_multipath_conf

- name: multipath | install | Load the multipath daemon on redhat
  command: modprobe dm-multipath
  when: ansible_os_family == 'RedHat'

- name: multipath | install | Install the required packages
  become: yes
  package:
    name: "{{ item }}"
    state: present
  with_items: multipath_pkgs

- name: multipath | install | Ensure started
  service:
    name: "{{ item }}"
    state: "started"
    enabled: "yes"
  with_items: service_daemons

# Run multipath the first time
- name: multipath | install | run multipath on first run
  command: /sbin/multipath
  when: multipath_first_run is defined or rewrite_multipath_conf == False
  ignore_errors: yes

# The disk_binding_result is consumed in the multipath.conf template
# This results in an updated multipath.conf next time
- name: multipath | install | Get bindings of devices on system
  get_bindings: ardana_host_info='{{ host | to_json }}'
  register: disk_bindings_result

- name: multipath | install | flush multipath on first run
  command: /sbin/multipath -F
  when: multipath_first_run is defined
  failed_when: false

- name: multipath | install | reinvoke multipath on first run
  command: /sbin/multipath
  when: multipath_first_run is defined

# This is what we want
- name: multipath | install | Set user_friendly_names no
  set_fact:
      multipath_user_friendly_names: "no"
  when: rewrite_multipath_conf

# This is with the aliases for the user friendly names for first run other wise normal
- name: multipath | install | Set real multipath configuration
  template:
    src: "multipath.conf.j2"
    dest: "/etc/multipath.conf"
  register: configuration_update
  when: rewrite_multipath_conf

- name: multipath | install | initialize rerun_multipath
  set_fact:
    rerun_multipath: False

- name: multipath | install | set rerun_multipath to True
  set_fact:
    rerun_multipath: True
  when: configuration_update is defined and configuration_update.changed

- name: multipath | install | run multipath on first run
  command: /sbin/multipath
  when: rerun_multipath or multipath_first_run is defined

# This may be redundant
- name: multipath | install | Restart if there is a configuration update
  service:
    name: "{{ item }}"
    state: "restarted"
    enabled: "yes"
  with_items: service_daemons
  when: rerun_multipath or multipath_first_run is defined

- name: multipath | install | Update initramfs
  command: "{{ initramfs_update_command }}"
  when: initramfs_update_command is defined and rerun_multipath

- name: multipath | marker | create /etc/openstack directory
  file: path=/etc/openstack state=directory

- name: osconfig | marker | create marker
  file: path=/etc/openstack/multipath-ran state=touch
